# Add a user with a password
PUT users /test-user {
        "email": "test@example.com",
        "hashed": "l8hGztvkFceKl+nVTXsYXC3Bo43venuo",
        "salt": "I9kv4rSE"
    } 200 {
        "username": "test-user",
        "email": "test@example.com"
    }

# Schema validation errors
PUT users /broken-user1 {
        "email": "t@v",
        "hashed": "l8hGztvkFceKl+nVTXsYXC3Bo43venuo",
        "salt": "I9kv4rSE"
    } 422 {"error": {"assertion" : "minLength", "in-data" : ["email"]}}
GET users /broken-user1 404

# Views can also check preconditions
setting webserver views/precondition {
    "view": "fostgres.sql",
    "configuration": {
            "sql": [{
                "return": "object",
                "path": [1],
                "GET": "SELECT * FROM passwords WHERE username=$1",
                "precondition": ["eq", ["match", 1], ["header", "__user"]]
            }]
        }
    }

# Check the precondition(array), if failed then return 403
GET precondition /test-user 403

# The wrong user also fails
set-path testserver.headers ["__user"] "random-user"
GET precondition /test-user 403

# The right user passes and then executes the GET SQL
set-path testserver.headers ["__user"] "test-user"
GET precondition /test-user 200 {
    "username": "test-user",
    "hashed": "l8hGztvkFceKl+nVTXsYXC3Bo43venuo",
    "salt": "I9kv4rSE"
}

# precondition configuration support either predicate array or object
setting webserver views/precondition {
    "view": "fostgres.sql",
    "configuration": {
            "sql": [{
                "return": "object",
                "path": [1],
                "GET": "SELECT * FROM passwords WHERE username=$1",
                "precondition": {
                    "check": ["eq", ["match", 1], ["header", "__user"]],
                    "failed": {
                        "view": "fost.response.401",
                        "configuration": {
                            "schemes": "Bearer"
                        }
                    }
                }
            }]
        }
    }

set-path testserver.headers ["__user"] ""
GET precondition /test-user 401

set-path testserver.headers ["__user"] "test-user"
GET precondition /test-user 200 {
        "username": "test-user",
        "hashed": "l8hGztvkFceKl+nVTXsYXC3Bo43venuo",
        "salt": "I9kv4rSE"
    }

# Preconditions can also run SQL
