# Add a user with a password
PUT users /test-user {
        "email": "test@example.com",
        "hashed": "l8hGztvkFceKl+nVTXsYXC3Bo43venuo",
        "salt": "I9kv4rSE"
    } 200 {
        "username": "test-user",
        "email": "test@example.com"
    }

# Schema validation errors
PUT users /broken-user1 {
        "email": "t@v",
        "hashed": "l8hGztvkFceKl+nVTXsYXC3Bo43venuo",
        "salt": "I9kv4rSE"
    } 422 {"error": {"assertion" : "minLength", "in-data" : ["email"]}}
GET users /broken-user1 404

# Add a user without a password
#PUT users /another-user {"email": "another@example.com"} 200
#GET users /another-user/password 404

# Check the precondition(array), if failed then return 403
GET users /test-user/password-with-precondition-array 403

set-path testserver.headers ["__user"] "random-user"
GET users /test-user/password-with-precondition-array 403

# If passed then execute the view
set-path testserver.headers ["__user"] "test-user"
GET users /test-user/password-with-precondition-array 200 {
    "username": "test-user",
    "hashed": "l8hGztvkFceKl+nVTXsYXC3Bo43venuo",
    "salt": "I9kv4rSE"
}

# precondition configuration support either predicate array or object
set-path testserver.headers ["__user"] ""
GET users /test-user/password-with-precondition-object 401

set-path testserver.headers ["__user"] "test-user"
GET users /test-user/password-with-precondition-object 200 {
    "username": "test-user",
    "hashed": "l8hGztvkFceKl+nVTXsYXC3Bo43venuo",
    "salt": "I9kv4rSE"
}
